/**
 * Pure Java console application.
 * This application demonstrates console I/O.
 *
 * This file was automatically generated by
 * Omnicore CodeGuide.
 */

package com.runstate.util.ssh;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.UserInfo;
import com.runstate.augur.AugurX;
import com.runstate.augur.controller.Controller;
import com.runstate.augur.controller.Prefs;
import javax.swing.JOptionPane;

public class SSHConnection {
	WritableInputStream mis;
	ReadableOutputStream mos;
	JSch jsch;
	Session session;
	Channel channel;
	String host;
	String initialLogin;

    boolean debug=Controller.getProfile().getBool(Prefs.DEBUG_SSH,false);
	
    // For backwards compatibility
	public SSHConnection(String host) throws SSHConnectionException {
       if (host.startsWith("twix"))
       {
           setupConnection(host, "twix");
       }
       else if (host.startsWith("cix"))
       {
            setupConnection(host,"qix");
       }
    }


    public SSHConnection(String host,String initialLogin) throws SSHConnectionException {
        setupConnection(host,initialLogin);
    }

    private void setupConnection(String host,String initialLogin) throws SSHConnectionException
    {
		this.host=host;
        this.initialLogin=initialLogin;

        jsch=new JSch();


		try {

			jsch.setKnownHosts(Controller.getProfile().get(Prefs.HOMEDIR)+"known_hosts");

			session=jsch.getSession(initialLogin,host,22);

			UserInfo ui=new CosyUserInfo();

			session.setUserInfo(ui);

			mis=new WritableInputStream();
			mos=new ReadableOutputStream();

			session.setInputStream(mis);
			session.setOutputStream(mos);

			session.connect();

			channel=session.openChannel("shell");

			channel.connect();


		} catch (JSchException e) { throw new SSHConnectionException("Failed to connect",e); }

	}
	
	public void connect() throws SSHConnectionException {
		if(session==null) {
			try {
				session=jsch.getSession(initialLogin,host,22);
				
				UserInfo ui=new CosyUserInfo();
				
				session.setUserInfo(ui);
				
				mis=new WritableInputStream();
				mos=new ReadableOutputStream();
				
				session.setInputStream(mis);
				session.setOutputStream(mos);
				
				session.connect();
				
				channel=session.openChannel("shell");
				
				channel.connect();
			} catch (JSchException e) { throw new SSHConnectionException("Failed to connect",e); }
			
		}
	}
	
	public boolean waitFor(String s) {
		boolean done=false;
		StringBuffer sb=new StringBuffer(1024);
		
		while(!done) {
			sb.setLength(0);
			
			if(mos.available()>0) {
				
				int i=mos.available();
				
				while(i>0) {
					int c=mos.read();
					sb.append((char)c);
					i--;
				}
				
				
				if(debug) System.out.println("Current read is '"+sb.toString()+"' ("+sb.length()+") waiting for "+s);
				
				if(sb.toString().indexOf(s)!=-1) {
					if(debug) System.out.println("Found it");
					return true;
				}
			}
			
			try {
				Thread.sleep(100);
			}
			catch (InterruptedException e) {}
			
		}
		
		return false;
	}
	public String waitForAndReturn(String s) {
		boolean done=false;
		StringBuffer sb=new StringBuffer(1024);
		while(!done) {
			sb.setLength(0);
			
			if(mos.available()>0) {
				
				int i=mos.available();
				
				while(i>0) {
					int c=mos.read();
					sb.append((char)c);
					i--;
				}
				
				
				if(debug) System.out.println("Current read is '"+sb.toString()+"' ("+sb.length()+") waiting for "+s);
				
				if(sb.toString().indexOf(s)!=-1) {
					if(debug) System.out.println("Found it");
                                      
                                              //  if(debug) System.out.println(sb);
                                        
					return sb.toString();
				}
			}
			
			try {
				Thread.sleep(100);
			}
			catch (InterruptedException e) {}
			
		}
		
		return null;
	}
	public int waitFor(String[] s) {
		boolean done=false;
		StringBuffer sb=new StringBuffer(1024);
		
		while(!done) {
			sb.setLength(0);
			
			if(mos.available()>0) {
				
				int i=mos.available();
				
				
				while(i>0) {
					int c=mos.read();
					sb.append((char)c);
					i--;
				}
				
				
				if(debug) {
					System.out.print("Current read is '"+sb.toString()+"' ("+sb.length()+") waiting for ");
					for(String st:s) { System.out.println("'"+st+"'"); }
				}
				
				for(int j=0;j<s.length;j++) {
					if(sb.toString().indexOf(s[j])!=-1) {
						if(debug) System.out.println("Got "+j);
						return j;
					}
				}
			}
			
			try {
				Thread.sleep(100);
			}
			catch (InterruptedException e) {}
			
		}
		
		return -1;
	}
	
	public void flushInput() {}
	
	public void flushOutput() {};
	
	public boolean isConnected() {
		if(session==null) return false;
		
		return session.isConnected();
	}
	
	public int available() {
		return mos.available();
	}
	
	public void write(byte b) {
		mis.write(b);
	}
	
	public void write(String s) {
		mis.write(s);
	}
	
	public int read() {
		return mos.read();
	}
	
	public void close() {
            if(session!=null)
            {
		session.disconnect();
		session=null;
            }
	}
	
	static class CosyUserInfo implements UserInfo {
		public String getPassword() {
			return "";
		}
		
		public String getPassphrase() {
			return "";
		}
		
		public void showMessage(String p1) {
			return;
		}
		
		public boolean promptYesNo(String p1) {
			
			int i=JOptionPane.showOptionDialog(null,p1,"SSH Query",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,null,null);
			
			if(i==JOptionPane.YES_OPTION) return true;
			
			return false;
		}
		
		public boolean promptPassword(String p1) {
			return false;
		}
		
		public boolean promptPassphrase(String str) {
			return true;
		}
		
		public String getPassphrase(String message) {
			return null;
		}
		
	}
	
	
	
	
}
